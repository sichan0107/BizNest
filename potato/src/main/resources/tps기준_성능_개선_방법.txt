참조 : https://golf-dev.tistory.com/75

1. TPS가 뭘까
 - Throughput Per Second : 초당 처리량 (sec)

2. Jmeter
 - 자바 애플리케이션에 쓰는 플러그인(?)으로 성능 측정이 가능함.

3. TPS가 낮은 애플리케이션의 성능을 개선하는 방법은 대표적으로 2개있다. (그외에도 어딘가 병목이 있을수있지만...)

 - scale out으로 스프링을 구동하는 단일 was 서버를 두 개로 늘린다.
 - cache를 이용한다. (local cache, global cache)
  > local cache : Memcached, local cahe
  > global cache : redis, kafka
    > redis : 10만 TPS까지 처리 가능하고, single 스레드이므로 원자성을 보장하여, 캐시뿐만 아니라 다양하게 사용가능

4. scale out 견적 및 비용 그리고 성능
 - was를 하나 더 구매 or tomcat
 - was의 설정
 - request를 어느 was에 보낼지 load balancing (round robin 등...)
 - 가장 기본적인 목록조회 테스트 기준 (약 2배 정도 늘어남... 왜냐면 was가 한대 더늘었으니까)

5. cache는?
 - 로컬 캐시보다는 글로벌이 대규모 트래픽엔 더 적합하다.
 - 물론 로컬 캐시는 아주 성능이 좋다. 하지만 치명적인 단점이 있는데...
  > 확장이 어려움. 캐시가 성능이 좋더라도 결국 서버 요청량이 늘면 scale out 해야한다.
  > 처리량이 좋더라도 그 처리량을 위해 cpu가 과도하게 사용될수 있다.

 - Redis는 클러스터링으로 저장소 확장을 보장하고, 서버가 증설되도 redis 하나만 바라보기 때문에 용이하다.
  > 다만, 네트워크 성능이 외부에 존재하는 인프라기 때문에 로컬 캐시에 비해 비싸다.
  > 결론적으로, 네트워크 성능과 비용을 손해보더라도 확장에 유리하도록 트레이드 오프해야함.

===========================================================================================================

6. DB connection pool 측면에서도 고려해볼만 하다. (일단 풀 설정과 성능은 아래 이유로 중요하다)
 - TPS를 알고있다면 Connection 세팅을 다시 봐야한다. 적절한 세팅값들의 기준은 아래와 같다.
 - 최대 커넥션 개수 (maximumPoolSize)
  > 풀이 제공하는 최대 커넥션 개수 (사용 중 + 유휴 idle)
  > 최대(목표) TPS, 한 커넥션의 쿼리 실행 시간 값이 필요하다.
  > 최대 TPS : 1개 커넥션의 TPS * 동시 커넥션 개수
   > 예를 들면 240 * 10 = 2400

  > 동시 커넥션 개수 = 최대 TPS / (1초 / 쿼리실행시간)
                  = 최대 TPS / 1개 커넥션의 초당 요청 처리 개수

  > 이 식은 평균적인 거고, 오래 걸리는 쿼리를 고려해야함. 안그러면 TPS가 훅훅
   > 엄청 느린 쿼리와 평균 쿼리의 중간값 기준으로 pool 사이즈를 잡자.

7. 커넥션 대기 시간 (connectionTimeout)
 - 풀에서 커넥션을 구하기 위해 대기하는 시간 (풀의 모든 커넥션이 사용중일 때 대기 상황 발생)
 - 기본값은 너무 크다 : 30초
 - 순간적인 트래픽 증가 시 쓰레드 풀 기반 WAS는 모두 대기할 수 있음
 - 기본값 대신 0.5 ~ 3초 이내로 설정해서 응답을 기다리는거보다 에러 화면이라도 응답주는게 나음.

8. 최소 유휴 커넥션 (minimumIdle)
 - 풀에 유지할 최소 유휴 커넥션 개수
  > 기본값은 maximumPoolSize와 동일
 - 기본 규칙
  > 히카리 문서 : 설정하지 않는 것 추천 (즉, 기본값으로 maximumPoolSize와 동일 고정 크기 추천)
  > 부득이하게 설정할 경우 고려사항
   (1) 트래픽이 서서히 증가 -> 최소 TPS 시점 기준으로 재 계산
   (2) 트래픽이 특정 시점에 급격히 증가 -> 설정하지 말 것
 - 트래픽이 적은 시간대 DB 자원 사용을 줄이기 위함.




